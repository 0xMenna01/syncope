<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx.xsd
                           http://www.springframework.org/schema/util
                           http://www.springframework.org/schema/util/spring-util.xsd">

  
  <import resource="classpath:persistenceContextEMFactory.xml"/>

  <bean id="nonJPAdbInitializer" class="org.springframework.jdbc.datasource.init.DataSourceInitializer">
    <property name="dataSource" ref="dataSource"/>
    <property name="enabled" value="true"/>
    <property name="databasePopulator">
      <bean class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator">
        <property name="continueOnError" value="true"/>
        <property name="ignoreFailedDrops" value="true"/>
        <property name="sqlScriptEncoding" value="UTF-8"/>
        <property name="scripts">
          <array>
            <value type="org.springframework.core.io.Resource">
              classpath:/quartz/${quartz.sql}
            </value>
          </array>
        </property>
      </bean>
    </property>
  </bean>
  
  <context:annotation-config/>
  <context:component-scan base-package="org.apache.syncope.server.persistence.jpa"/>

  <bean id="database.schema" class="java.lang.String">
    <constructor-arg value="${database.schema}"/>
  </bean>
  <bean id="persistenceProperties" class="org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader">
    <property name="primary" value="file:${content.directory}/persistence.properties"/>
    <property name="fallback" value="classpath:persistence.properties"/>
  </bean>
  <bean id="contentXML" class="org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader">
    <property name="primary" value="file:${content.directory}/content.xml"/>
    <property name="fallback" value="classpath:content.xml"/>
  </bean>
  <bean id="viewsXML" class="org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader">
    <property name="primary" value="file:${content.directory}/views.xml"/>
    <property name="fallback" value="classpath:views.xml"/>
  </bean>
  <bean id="indexesXML" class="org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader">
    <property name="primary" value="file:${content.directory}/indexes.xml"/>
    <property name="fallback" value="classpath:indexes.xml"/>
  </bean>

  <!-- Use JNDI datasource as default but, when not available, revert to
  local datasource, with different properties for execution and testing. 
  In any case, get all JDBC connections with a determined isolation level. -->
  <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
    <property name="jndiName" value="java:comp/env/jdbc/syncopeDataSource"/>
    <property name="defaultObject" ref="localDataSource"/>
  </bean>

  <bean id="localDataSource" class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close">
    <property name="driverClassName" value="${jpa.driverClassName}"/>
    <property name="url" value="${jpa.url}"/>
    <property name="username" value="${jpa.username}"/>
    <property name="password" value="${jpa.password}"/>
    <!-- connection pool configuration - transaction isolation, default READ_COMMITTED (see SYNCOPE-202) -->
    <property name="defaultTransactionIsolation">
      <util:constant static-field="${jpa.pool.defaultTransactionIsolation:java.sql.Connection.TRANSACTION_READ_COMMITTED}"/>
    </property>
    <!-- connection pool configuration - default values taken from BasicDataSource default values -->
    <property name="initialSize" value="${jpa.pool.initialSize:0}"/>
    <property name="maxTotal" value="${jpa.pool.maxActive:8}"/>
    <property name="maxIdle" value="${jpa.pool.maxIdle:8}"/>
    <property name="minIdle" value="${jpa.pool.minIdle:0}"/>
    <property name="maxWaitMillis" value="${jpa.pool.maxWait:-1}"/>
    <property name="validationQuery" value="${jpa.pool.validationQuery}"/>
    <property name="validationQueryTimeout" value="${jpa.pool.validationQueryTimeout:-1}"/>
    <property name="testOnBorrow" value="${jpa.pool.testOnBorrow:true}"/>
    <property name="testOnReturn" value="${jpa.pool.testOnReturn:false}"/>
    <property name="testWhileIdle" value="${jpa.pool.testWhileIdle:false}"/>
    <property name="timeBetweenEvictionRunsMillis" value="${jpa.pool.timeBetweenEvictionRunsMillis:-1}"/>
    <property name="numTestsPerEvictionRun" value="${jpa.pool.numTestsPerEvictionRun:3}"/>
    <property name="minEvictableIdleTimeMillis" value="${jpa.pool.minEvictableIdleTimeMillis:1800000}"/>
    <property name="removeAbandonedOnBorrow" value="${jpa.pool.removeAbandoned:false}"/>
    <property name="removeAbandonedOnMaintenance" value="${jpa.pool.removeAbandoned:false}"/>
    <property name="removeAbandonedTimeout" value="${jpa.pool.removeAbandonedTimeout:300}"/>
    <property name="logAbandoned" value="${jpa.pool.logAbandoned:false}"/>
  </bean>

  <bean id="entityManager" class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
    <property name="entityManagerFactory" ref="entityManagerFactory"/>
  </bean>

  <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactory"/>
  </bean>
  <tx:annotation-driven/>

  <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean"/>
</beans>
